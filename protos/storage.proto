syntax = "proto3";

package storage;
option java_package = "io.ceresdb.proto.internal";
option java_outer_classname = "Storage";
option go_package = "github.com/CeresDB/ceresdbproto/golang/pkg/storagepb";

import "xx/common.proto";
import "prometheus.proto";

service StorageService {
  rpc Route(RouteRequest) returns (RouteResponse) {}
  rpc Write(WriteRequest) returns (WriteResponse) {}
  rpc StreamWrite(stream WriteRequest) returns (WriteResponse) {}
  rpc Query(QueryRequest) returns (QueryResponse) {}
  rpc StreamQuery(QueryRequest) returns (stream QueryResponse) {}
  rpc PromQuery(prometheus.PrometheusQueryRequest) returns (prometheus.PrometheusQueryResponse) {}
}

message RouteRequest {
  repeated string metrics = 1;
}

message Endpoint {
  string ip = 1;
  uint32 port = 2;
}

message Route {
  string metric = 1;
  Endpoint endpoint = 2;
  bytes ext = 3;
}

message RouteResponse {
  common.ResponseHeader header = 1;
  repeated Route routes = 2;
}

message Value {
  oneof value {
    double float64_value = 1;
    string string_value = 2;
    int64 int64_value = 3;
    float float32_value = 4;
    int32 int32_value = 5;
    int32 int16_value = 6;
    int32 int8_value = 7;
    bool bool_value = 8;
    uint64 uint64_value = 9;
    uint32 uint32_value = 10;
    uint32 uint16_value = 11;
    uint32 uint8_value = 12;
    int64 timestamp_value = 13;
    bytes varbinary_value = 14;
  }
}

message Field {
  uint32 name_index = 1;
  Value value = 2;
}

message FieldGroup {
  int64 timestamp = 1;
  repeated Field fields = 2;
}

message Tag {
  uint32 name_index = 1;
  Value value = 2;
}

message WriteEntry {
  repeated Tag tags = 1;
  repeated FieldGroup field_groups = 2;
}

message WriteMetric {
  string metric = 1;
  repeated string tag_names = 2;
  repeated string field_names = 3;
  repeated WriteEntry entries = 4;
}

message WriteRequest {
  repeated WriteMetric metrics = 1;
}

message WriteResponse {
  common.ResponseHeader header = 1;
  uint32 success = 2;
  uint32 failed = 3;
}

message QueryRequest {
  repeated string metrics = 1;
  string ql = 2;
}

message QueryResponse {
  common.ResponseHeader header = 1;
  enum SchemaType {
    AVRO = 0;
    JSON = 1;
  }
  SchemaType schema_type = 2;
  string schema_content = 3;
  repeated bytes rows = 4;
  uint32 affected_rows = 5;
}
