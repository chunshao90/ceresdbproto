// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.7.1
// source: meta/cluster.proto

package metapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeState int32

const (
	NodeState_ONLINE  NodeState = 0
	NodeState_OFFLINE NodeState = 1
)

// Enum value maps for NodeState.
var (
	NodeState_name = map[int32]string{
		0: "ONLINE",
		1: "OFFLINE",
	}
	NodeState_value = map[string]int32{
		"ONLINE":  0,
		"OFFLINE": 1,
	}
)

func (x NodeState) Enum() *NodeState {
	p := new(NodeState)
	*p = x
	return p
}

func (x NodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_meta_cluster_proto_enumTypes[0].Descriptor()
}

func (NodeState) Type() protoreflect.EnumType {
	return &file_meta_cluster_proto_enumTypes[0]
}

func (x NodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeState.Descriptor instead.
func (NodeState) EnumDescriptor() ([]byte, []int) {
	return file_meta_cluster_proto_rawDescGZIP(), []int{0}
}

type ShardRole int32

const (
	ShardRole_LEADER   ShardRole = 0
	ShardRole_FOLLOWER ShardRole = 1
)

// Enum value maps for ShardRole.
var (
	ShardRole_name = map[int32]string{
		0: "LEADER",
		1: "FOLLOWER",
	}
	ShardRole_value = map[string]int32{
		"LEADER":   0,
		"FOLLOWER": 1,
	}
)

func (x ShardRole) Enum() *ShardRole {
	p := new(ShardRole)
	*p = x
	return p
}

func (x ShardRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShardRole) Descriptor() protoreflect.EnumDescriptor {
	return file_meta_cluster_proto_enumTypes[1].Descriptor()
}

func (ShardRole) Type() protoreflect.EnumType {
	return &file_meta_cluster_proto_enumTypes[1]
}

func (x ShardRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShardRole.Descriptor instead.
func (ShardRole) EnumDescriptor() ([]byte, []int) {
	return file_meta_cluster_proto_rawDescGZIP(), []int{1}
}

type ClusterTopology_ClusterState int32

const (
	ClusterTopology_EMPTY             ClusterTopology_ClusterState = 0
	ClusterTopology_PREPARE_REBALANCE ClusterTopology_ClusterState = 1
	ClusterTopology_AWAITING_CLOSE    ClusterTopology_ClusterState = 2
	ClusterTopology_AWAITING_OPEN     ClusterTopology_ClusterState = 3
	ClusterTopology_STABLE            ClusterTopology_ClusterState = 4
)

// Enum value maps for ClusterTopology_ClusterState.
var (
	ClusterTopology_ClusterState_name = map[int32]string{
		0: "EMPTY",
		1: "PREPARE_REBALANCE",
		2: "AWAITING_CLOSE",
		3: "AWAITING_OPEN",
		4: "STABLE",
	}
	ClusterTopology_ClusterState_value = map[string]int32{
		"EMPTY":             0,
		"PREPARE_REBALANCE": 1,
		"AWAITING_CLOSE":    2,
		"AWAITING_OPEN":     3,
		"STABLE":            4,
	}
)

func (x ClusterTopology_ClusterState) Enum() *ClusterTopology_ClusterState {
	p := new(ClusterTopology_ClusterState)
	*p = x
	return p
}

func (x ClusterTopology_ClusterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterTopology_ClusterState) Descriptor() protoreflect.EnumDescriptor {
	return file_meta_cluster_proto_enumTypes[2].Descriptor()
}

func (ClusterTopology_ClusterState) Type() protoreflect.EnumType {
	return &file_meta_cluster_proto_enumTypes[2]
}

func (x ClusterTopology_ClusterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterTopology_ClusterState.Descriptor instead.
func (ClusterTopology_ClusterState) EnumDescriptor() ([]byte, []int) {
	return file_meta_cluster_proto_rawDescGZIP(), []int{1, 0}
}

// example:
// cluster 1: v1/cluster/1 -> ceresmeta.Cluster
// cluster 2: v1/cluster/2 -> ceresmeta.Cluster
type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MinNodeCount uint32 `protobuf:"varint,3,opt,name=min_node_count,json=minNodeCount,proto3" json:"min_node_count,omitempty"`
	//the number of shard replication
	ReplicationFactor uint32 `protobuf:"varint,4,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	ShardTotal        uint32 `protobuf:"varint,5,opt,name=shard_total,json=shardTotal,proto3" json:"shard_total,omitempty"`
	CreatedAt         uint64 `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meta_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_meta_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_meta_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetMinNodeCount() uint32 {
	if x != nil {
		return x.MinNodeCount
	}
	return 0
}

func (x *Cluster) GetReplicationFactor() uint32 {
	if x != nil {
		return x.ReplicationFactor
	}
	return 0
}

func (x *Cluster) GetShardTotal() uint32 {
	if x != nil {
		return x.ShardTotal
	}
	return 0
}

func (x *Cluster) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// example:
// cluster 1: v1/cluster/1/topo/latest_version -> 99
//            v1/cluster/1/topo/99 -> ceresmeta.ClusterTopology
//            v1/cluster/1/topo/98 -> ceresmeta.ClusterTopology
type ClusterTopology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   uint32                       `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	DataVersion uint64                       `protobuf:"varint,2,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`
	State       ClusterTopology_ClusterState `protobuf:"varint,3,opt,name=state,proto3,enum=ceresmeta.ClusterTopology_ClusterState" json:"state,omitempty"`
	ShardView   []*Shard                     `protobuf:"bytes,4,rep,name=shard_view,json=shardView,proto3" json:"shard_view,omitempty"`
	// cluster view's changed cause
	Cause            string                   `protobuf:"bytes,5,opt,name=cause,proto3" json:"cause,omitempty"`
	CreatedAt        uint64                   `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ChangeNodeShards map[string]*ChangeShards `protobuf:"bytes,7,rep,name=change_node_shards,json=changeNodeShards,proto3" json:"change_node_shards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClusterTopology) Reset() {
	*x = ClusterTopology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meta_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterTopology) ProtoMessage() {}

func (x *ClusterTopology) ProtoReflect() protoreflect.Message {
	mi := &file_meta_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterTopology.ProtoReflect.Descriptor instead.
func (*ClusterTopology) Descriptor() ([]byte, []int) {
	return file_meta_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterTopology) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterTopology) GetDataVersion() uint64 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

func (x *ClusterTopology) GetState() ClusterTopology_ClusterState {
	if x != nil {
		return x.State
	}
	return ClusterTopology_EMPTY
}

func (x *ClusterTopology) GetShardView() []*Shard {
	if x != nil {
		return x.ShardView
	}
	return nil
}

func (x *ClusterTopology) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *ClusterTopology) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ClusterTopology) GetChangeNodeShards() map[string]*ChangeShards {
	if x != nil {
		return x.ChangeNodeShards
	}
	return nil
}

type ChangeShards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloseShards []*Shard `protobuf:"bytes,1,rep,name=close_shards,json=closeShards,proto3" json:"close_shards,omitempty"`
	OpenShards  []*Shard `protobuf:"bytes,2,rep,name=open_shards,json=openShards,proto3" json:"open_shards,omitempty"`
}

func (x *ChangeShards) Reset() {
	*x = ChangeShards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meta_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeShards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeShards) ProtoMessage() {}

func (x *ChangeShards) ProtoReflect() protoreflect.Message {
	mi := &file_meta_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeShards.ProtoReflect.Descriptor instead.
func (*ChangeShards) Descriptor() ([]byte, []int) {
	return file_meta_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *ChangeShards) GetCloseShards() []*Shard {
	if x != nil {
		return x.CloseShards
	}
	return nil
}

func (x *ChangeShards) GetOpenShards() []*Shard {
	if x != nil {
		return x.OpenShards
	}
	return nil
}

type Shard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShardRole ShardRole `protobuf:"varint,2,opt,name=shard_role,json=shardRole,proto3,enum=ceresmeta.ShardRole" json:"shard_role,omitempty"`
	Node      string    `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *Shard) Reset() {
	*x = Shard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meta_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shard) ProtoMessage() {}

func (x *Shard) ProtoReflect() protoreflect.Message {
	mi := &file_meta_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shard.ProtoReflect.Descriptor instead.
func (*Shard) Descriptor() ([]byte, []int) {
	return file_meta_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *Shard) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Shard) GetShardRole() ShardRole {
	if x != nil {
		return x.ShardRole
	}
	return ShardRole_LEADER
}

func (x *Shard) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

// example:
// cluster 1: v1/cluster/1/schema/1 -> ceresmeta.Schema
//            v1/cluster/1/schema/2 -> ceresmeta.Schema
//            v1/cluster/1/schema/3 -> ceresmeta.Schema
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterId uint32 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt uint64 `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meta_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_meta_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_meta_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *Schema) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Schema) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// example:
// cluster 1: v1/cluster/1/schema/1/table/1 -> ceresmeta.Table
//            v1/cluster/1/schema/1/table/2 -> ceresmeta.Table
//            v1/cluster/1/schema/1/table/3 -> ceresmeta.Table
//            v1/cluster/1/schema/2/table/4 -> ceresmeta.Table
type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SchemaId  uint32 `protobuf:"varint,3,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	ShardId   uint32 `protobuf:"varint,4,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Desc      string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	CreatedAt uint64 `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meta_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_meta_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_meta_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *Table) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Table) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Table) GetSchemaId() uint32 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

func (x *Table) GetShardId() uint32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *Table) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Table) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// example:
// cluster 1: v1/cluster/1/shard/1/latest_version -> 9
//            v1/cluster/1/shard/1/9 -> ceresmeta.ShardTopology
//            v1/cluster/1/shard/1/8 -> ceresmeta.ShardTopology
//            v1/cluster/1/shard/2/latest_version -> 3
//            v1/cluster/1/shard/2/3 -> ceresmeta.ShardTopology
type ShardTopology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId   uint32   `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	TableIds  []uint64 `protobuf:"varint,2,rep,packed,name=table_ids,json=tableIds,proto3" json:"table_ids,omitempty"`
	Version   uint64   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt uint64   `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ShardTopology) Reset() {
	*x = ShardTopology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meta_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardTopology) ProtoMessage() {}

func (x *ShardTopology) ProtoReflect() protoreflect.Message {
	mi := &file_meta_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardTopology.ProtoReflect.Descriptor instead.
func (*ShardTopology) Descriptor() ([]byte, []int) {
	return file_meta_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *ShardTopology) GetShardId() uint32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *ShardTopology) GetTableIds() []uint64 {
	if x != nil {
		return x.TableIds
	}
	return nil
}

func (x *ShardTopology) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ShardTopology) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// example:
// cluster 1: v1/cluster/1/node/127.0.0.1:8081 -> value is ceresmeta.Node
//            v1/cluster/1/node/127.0.0.2:8081 -> value is ceresmeta.Node
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                  string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	NodeStats             *NodeStats             `protobuf:"bytes,2,opt,name=node_stats,json=nodeStats,proto3" json:"node_stats,omitempty"`
	CreateTime            uint64                 `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	LastTouchTime         uint64                 `protobuf:"varint,4,opt,name=last_touch_time,json=lastTouchTime,proto3" json:"last_touch_time,omitempty"`
	State                 NodeState              `protobuf:"varint,5,opt,name=state,proto3,enum=ceresmeta.NodeState" json:"state,omitempty"`
	HeartbeatSamplingInfo *HeartbeatSamplingInfo `protobuf:"bytes,6,opt,name=heartbeat_sampling_info,json=heartbeatSamplingInfo,proto3" json:"heartbeat_sampling_info,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meta_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_meta_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_meta_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *Node) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *Node) GetNodeStats() *NodeStats {
	if x != nil {
		return x.NodeStats
	}
	return nil
}

func (x *Node) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Node) GetLastTouchTime() uint64 {
	if x != nil {
		return x.LastTouchTime
	}
	return 0
}

func (x *Node) GetState() NodeState {
	if x != nil {
		return x.State
	}
	return NodeState_ONLINE
}

func (x *Node) GetHeartbeatSamplingInfo() *HeartbeatSamplingInfo {
	if x != nil {
		return x.HeartbeatSamplingInfo
	}
	return nil
}

type NodeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lease       uint32 `protobuf:"varint,1,opt,name=lease,proto3" json:"lease,omitempty"`
	Zone        string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	NodeVersion string `protobuf:"bytes,3,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
}

func (x *NodeStats) Reset() {
	*x = NodeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meta_cluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStats) ProtoMessage() {}

func (x *NodeStats) ProtoReflect() protoreflect.Message {
	mi := &file_meta_cluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStats.ProtoReflect.Descriptor instead.
func (*NodeStats) Descriptor() ([]byte, []int) {
	return file_meta_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *NodeStats) GetLease() uint32 {
	if x != nil {
		return x.Lease
	}
	return 0
}

func (x *NodeStats) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *NodeStats) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

type HeartbeatSamplingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold                      float64 `protobuf:"fixed64,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	MinStdDeviationMillis          float64 `protobuf:"fixed64,2,opt,name=min_std_deviation_millis,json=minStdDeviationMillis,proto3" json:"min_std_deviation_millis,omitempty"`
	AcceptableHeartbeatPauseMillis uint64  `protobuf:"varint,3,opt,name=acceptable_heartbeat_pause_millis,json=acceptableHeartbeatPauseMillis,proto3" json:"acceptable_heartbeat_pause_millis,omitempty"`
	FirstHeartbeatEstimateMillis   uint64  `protobuf:"varint,4,opt,name=first_heartbeat_estimate_millis,json=firstHeartbeatEstimateMillis,proto3" json:"first_heartbeat_estimate_millis,omitempty"`
	MaxSampleSize                  uint32  `protobuf:"varint,5,opt,name=max_sample_size,json=maxSampleSize,proto3" json:"max_sample_size,omitempty"`
	Intervals                      []int64 `protobuf:"varint,6,rep,packed,name=intervals,proto3" json:"intervals,omitempty"`
	IntervalSum                    uint64  `protobuf:"varint,7,opt,name=interval_sum,json=intervalSum,proto3" json:"interval_sum,omitempty"`
	SquaredIntervalSum             uint64  `protobuf:"varint,8,opt,name=squared_interval_sum,json=squaredIntervalSum,proto3" json:"squared_interval_sum,omitempty"`
	LastTimestampMillis            uint64  `protobuf:"varint,9,opt,name=last_timestamp_millis,json=lastTimestampMillis,proto3" json:"last_timestamp_millis,omitempty"`
}

func (x *HeartbeatSamplingInfo) Reset() {
	*x = HeartbeatSamplingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meta_cluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatSamplingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatSamplingInfo) ProtoMessage() {}

func (x *HeartbeatSamplingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meta_cluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatSamplingInfo.ProtoReflect.Descriptor instead.
func (*HeartbeatSamplingInfo) Descriptor() ([]byte, []int) {
	return file_meta_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *HeartbeatSamplingInfo) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *HeartbeatSamplingInfo) GetMinStdDeviationMillis() float64 {
	if x != nil {
		return x.MinStdDeviationMillis
	}
	return 0
}

func (x *HeartbeatSamplingInfo) GetAcceptableHeartbeatPauseMillis() uint64 {
	if x != nil {
		return x.AcceptableHeartbeatPauseMillis
	}
	return 0
}

func (x *HeartbeatSamplingInfo) GetFirstHeartbeatEstimateMillis() uint64 {
	if x != nil {
		return x.FirstHeartbeatEstimateMillis
	}
	return 0
}

func (x *HeartbeatSamplingInfo) GetMaxSampleSize() uint32 {
	if x != nil {
		return x.MaxSampleSize
	}
	return 0
}

func (x *HeartbeatSamplingInfo) GetIntervals() []int64 {
	if x != nil {
		return x.Intervals
	}
	return nil
}

func (x *HeartbeatSamplingInfo) GetIntervalSum() uint64 {
	if x != nil {
		return x.IntervalSum
	}
	return 0
}

func (x *HeartbeatSamplingInfo) GetSquaredIntervalSum() uint64 {
	if x != nil {
		return x.SquaredIntervalSum
	}
	return 0
}

func (x *HeartbeatSamplingInfo) GetLastTimestampMillis() uint64 {
	if x != nil {
		return x.LastTimestampMillis
	}
	return 0
}

var File_meta_cluster_proto protoreflect.FileDescriptor

var file_meta_cluster_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x65, 0x72, 0x65, 0x73, 0x6d, 0x65, 0x74, 0x61, 0x22,
	0xc2, 0x01, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x9b, 0x04, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x65, 0x72, 0x65,
	0x73, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x65, 0x72, 0x65, 0x73, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x5e, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x65,
	0x72, 0x65, 0x73, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x1a,
	0x5c, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x65,
	0x73, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x63, 0x0a,
	0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x50,
	0x41, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x04, 0x22, 0x76, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x73,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x65, 0x72, 0x65, 0x73, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0x60, 0x0a, 0x05, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x73, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x09, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x6a, 0x0a, 0x06,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x33, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x73, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x63, 0x65, 0x72, 0x65, 0x73, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x17, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x65, 0x72, 0x65, 0x73, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x58, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xcf, 0x03, 0x0a, 0x15, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x12, 0x49, 0x0a, 0x21, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12, 0x32, 0x0a,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6c, 0x61,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x2a, 0x24, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x2a, 0x25, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x01, 0x42, 0x2c,
	0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x65, 0x72,
	0x65, 0x73, 0x44, 0x42, 0x2f, 0x63, 0x65, 0x72, 0x65, 0x73, 0x64, 0x62, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meta_cluster_proto_rawDescOnce sync.Once
	file_meta_cluster_proto_rawDescData = file_meta_cluster_proto_rawDesc
)

func file_meta_cluster_proto_rawDescGZIP() []byte {
	file_meta_cluster_proto_rawDescOnce.Do(func() {
		file_meta_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_meta_cluster_proto_rawDescData)
	})
	return file_meta_cluster_proto_rawDescData
}

var file_meta_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_meta_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_meta_cluster_proto_goTypes = []interface{}{
	(NodeState)(0),                    // 0: ceresmeta.NodeState
	(ShardRole)(0),                    // 1: ceresmeta.ShardRole
	(ClusterTopology_ClusterState)(0), // 2: ceresmeta.ClusterTopology.ClusterState
	(*Cluster)(nil),                   // 3: ceresmeta.Cluster
	(*ClusterTopology)(nil),           // 4: ceresmeta.ClusterTopology
	(*ChangeShards)(nil),              // 5: ceresmeta.ChangeShards
	(*Shard)(nil),                     // 6: ceresmeta.Shard
	(*Schema)(nil),                    // 7: ceresmeta.Schema
	(*Table)(nil),                     // 8: ceresmeta.Table
	(*ShardTopology)(nil),             // 9: ceresmeta.ShardTopology
	(*Node)(nil),                      // 10: ceresmeta.Node
	(*NodeStats)(nil),                 // 11: ceresmeta.NodeStats
	(*HeartbeatSamplingInfo)(nil),     // 12: ceresmeta.HeartbeatSamplingInfo
	nil,                               // 13: ceresmeta.ClusterTopology.ChangeNodeShardsEntry
}
var file_meta_cluster_proto_depIdxs = []int32{
	2,  // 0: ceresmeta.ClusterTopology.state:type_name -> ceresmeta.ClusterTopology.ClusterState
	6,  // 1: ceresmeta.ClusterTopology.shard_view:type_name -> ceresmeta.Shard
	13, // 2: ceresmeta.ClusterTopology.change_node_shards:type_name -> ceresmeta.ClusterTopology.ChangeNodeShardsEntry
	6,  // 3: ceresmeta.ChangeShards.close_shards:type_name -> ceresmeta.Shard
	6,  // 4: ceresmeta.ChangeShards.open_shards:type_name -> ceresmeta.Shard
	1,  // 5: ceresmeta.Shard.shard_role:type_name -> ceresmeta.ShardRole
	11, // 6: ceresmeta.Node.node_stats:type_name -> ceresmeta.NodeStats
	0,  // 7: ceresmeta.Node.state:type_name -> ceresmeta.NodeState
	12, // 8: ceresmeta.Node.heartbeat_sampling_info:type_name -> ceresmeta.HeartbeatSamplingInfo
	5,  // 9: ceresmeta.ClusterTopology.ChangeNodeShardsEntry.value:type_name -> ceresmeta.ChangeShards
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_meta_cluster_proto_init() }
func file_meta_cluster_proto_init() {
	if File_meta_cluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_meta_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meta_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterTopology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meta_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeShards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meta_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meta_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meta_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meta_cluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardTopology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meta_cluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meta_cluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meta_cluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatSamplingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meta_cluster_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meta_cluster_proto_goTypes,
		DependencyIndexes: file_meta_cluster_proto_depIdxs,
		EnumInfos:         file_meta_cluster_proto_enumTypes,
		MessageInfos:      file_meta_cluster_proto_msgTypes,
	}.Build()
	File_meta_cluster_proto = out.File
	file_meta_cluster_proto_rawDesc = nil
	file_meta_cluster_proto_goTypes = nil
	file_meta_cluster_proto_depIdxs = nil
}
